@using GridMvc.Html
@using System.Web.UI.WebControls

@model IQueryable<MojCRM.Areas.HelpDesk.Models.Delivery>

@{
    ViewBag.Title = "Dostava eRačuna";
    Layout = "~/Views/Shared/_UserLayoutNew.cshtml";
}

@{
    var documentTypeList = new List<ListItem>
        {
            new ListItem {Text = "eDokument", Value = "0" },
            new ListItem {Text = "eRačun", Value = "1" },
            new ListItem {Text = "Storno", Value = "3" },
            new ListItem {Text = "eOpomena", Value = "4" },
            new ListItem {Text = "eOdgovor", Value = "7" },
            new ListItem {Text = "eNarudžba", Value = "105" },
            new ListItem {Text = "eOpoziv", Value = "226" },
            new ListItem {Text = "eIzmjena", Value = "230" },
            new ListItem {Text = "eOdgovorN", Value = "231" },
            new ListItem {Text = "eOtpremnica", Value = "351" },
            new ListItem {Text = "eOdobrenje", Value = "381" },
            new ListItem {Text = "eTerećenje", Value = "383" },
        };
    var ticketTypeList = new List<ListItem>
        {
            new ListItem{ Value= "1", Text = "Prvi dokument"},
        };
    var assigned = new List<ListItem>
        {
            new ListItem{ Value = "1", Text = "Moje"},
            new ListItem{ Value = "2", Text = "Nedodijeljene"}
        };
    var documentStatusList = new List<ListItem>
        {
            new ListItem{ Value= "10", Text = "U pripremi"},
            new ListItem{ Value= "20", Text = "Potpisan"},
            new ListItem{ Value= "30", Text = "Poslan"},
            new ListItem{ Value= "40", Text = "Dostavljen"},
            new ListItem{ Value= "45", Text = "Ispisan"},
            new ListItem{ Value= "50", Text = "Neuspješan"},
            new ListItem{ Value= "55", Text = "Uklonjen"},
        };
    var deliveryAgents = new List<ListItem>
        {
            new ListItem{ Value = "Darko Glatki", Text = "Darko Glatki"},
            new ListItem{ Value = "Filip Troskot", Text = "Filip Troskot"},
            new ListItem{ Value = "Filip Karmazen", Text = "Filip Karmazen"},
            new ListItem{ Value = "Katarina Ceković", Text = "Katarina Ceković"},
            new ListItem{ Value = "Viktor Jajtić", Text = "Viktor Jajtić"},
            new ListItem{ Value = "Filip Vučemilović Grgić", Text = "Filip Vučemilović Grgić"},
            new ListItem{ Value = "Nikolina Ćosić", Text = "Nikolina Ćosić"},
            new ListItem{ Value = "Ivan Boban", Text = "Ivan Boban"},
            new ListItem{ Value = "Ana Šimac", Text = "Ana Šimac"},
            new ListItem{ Value = "Matija Ekart", Text = "Matija Ekart"},
            new ListItem{ Value = "Filip Klarić", Text = "Filip Klarić"}
        };

}

<body>
    <h2 style="text-align:center"><strong>Pregled dokumenata za dostavu</strong></h2>

    <hr />
    <div>
        <div class="row" style="text-align:center">
            <div class="col-md-12">
                <div class="btn btn-group" role="group">
                    <a href="@Url.Action("UpdateAllStatusesSent", "Delivery")" class="btn btn-primary btn-sm" title="Provjera statusa dokumenata u statusu poslano">
                        <i class="fa fa-question-circle" style="color:gold"></i>
                    </a>
                    <a href="@Url.Action("UpdateAllStatusesOther", "Delivery")" class="btn btn-primary btn-sm" title="Provjera statusa dokumenata u ostalim statusima">
                        <i class="fa fa-question-circle" style="color:red"></i>
                    </a>
                </div>
                <div class="btn btn-group" role="group">
                    <a id="assign-all" method="post" class="btn btn-default btn-sm" onclick="javascript: AssignAll()" title="Dodijeli sve odabrane dokumente">
                        <i class="fa fa-check-circle-o"></i>
                    </a>
                    <a id="remove-all" method="post" class="btn btn-default btn-sm" onclick="javascript: RemoveAll()" title="Ukloni sve odabrane dokumente">
                        <i class="fa fa-times text-danger"></i>
                    </a>
                    @if (User.IsInRole("Management") || User.IsInRole("Admin") || User.IsInRole("Superadmin"))
                    {
                        <a id="send-report" method="post" class="btn btn-default btn-sm" onclick="javascript: SendReport()" title="Pošalji jutarnji report upravi">
                            <i class="fa fa-send"></i>
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
    <hr />

    @using (Html.BeginForm("Index", "Delivery", FormMethod.Get))
    {
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label for="sender-search">Naziv ili OIB pošiljatelja</label>
                    <div id="sender-search">
                        @Html.TextBox("Sender", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Naziv ili OIB pošiljatelja" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="receiver-search">Naziv ili OIB primatelja</label>
                    <div id="receiver-search">
                        @Html.TextBox("Receiver", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Naziv ili OIB primatelja" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="invoice-number-search">Interni broj</label>
                    <div id="invoice-number-search">
                        @Html.TextBox("InvoiceNumber", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Interni broj" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="buyer-email-search">E-mail adresa primatelja</label>
                    <div id="buyer-email-search">
                        @Html.TextBox("BuyerEmail", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "E-mail adresa primatelja" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="sent-date-search">Datum slanja dokumenta</label>
                    <div>
                        @Html.TextBox("SentDate", ViewBag.CurrentFilter as string, new { @class = "date-picker form-control", @placeholder = "Datum slanja dokumenta", @type = "text", @id = "sent-date-search", @name = "sent-date-search" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="ticket-date-search">Datum kreiranja kartice</label>
                    <div>
                        @Html.TextBox("TicketDate", ViewBag.CurrentFilter as string, new { @class = "date-picker form-control", @placeholder = "Datum kreiranja kartice", @type = "text", @id = "ticket-date-search", @name = "ticket-date-search" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="ticket-status-search">Status dokumenta</label>
                    <div id="delivery-detail-contact">
                        @Html.DropDownList("DocumentStatus", new SelectList(documentStatusList, "Value", "Text"), "Odaberi status dokumenta", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                    <div class="form-group">
                        <label for="document-type-search">Tip dokumenta</label>
                        <div>
                            @Html.DropDownList("DocumentType", new SelectList(documentTypeList, "Value", "Text"), "Odaberi tip dokumenta", new { @class = "form-control" })
                        </div>
                    </div>
             </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <label for="ticket-type-search">Tip kartice</label>
                    <div>
                        @Html.DropDownList("TicketType", new SelectList(ticketTypeList, "Value", "Text"), "Sve", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="assigned-search">Dodijeljeno</label>
                    <div>
                        @Html.DropDownList("Assigned", new SelectList(assigned, "Value", "Text"), "Sve", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    Broj trenutno otvorenih kartica: <strong title="Ukupan broj otvorenih kartica">@ViewBag.OpenTickets</strong> <strong style="color:green" title="Broj otvorenih dodijeljenih kartica">(@ViewBag.OpenTicketsAssigned)</strong>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    Broj rezultata pretrage: <strong title="Ukupan broj rezultata pretrage">@ViewBag.SearchResults</strong> <strong style="color:green" title="Broj rezultata pretrage koji su dodijeljeni">(@ViewBag.SearchResultsAssigned)</strong>
                </div>
            </div>
        </div>
        <div class="row">
            @if (User.IsInRole("Management") || User.IsInRole("Administrator") || User.IsInRole("Superadmin"))
            {
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="ticket-type-search">Dodijeljeno</label>
                        <div>
                            @Html.DropDownList("AssignedTo", new SelectList(deliveryAgents, "Value", "Text"), "Dodijeljeno agentu", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
            <div class="col-md-4">
                <div class="alert alert-info alert-sm">
                    Broj kreiranih kartica (@DateTime.Today.ToShortDateString()): <strong title="Ukupan broj kreiranih kartica">@ViewBag.TicketsCreatedToday</strong> <strong style="color:green" title="Broj kreiranih kartica koje su dodijeljene">(@ViewBag.TicketsCreatedTodayAssigned)</strong>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    Broj kreiranih kartica (za prvi put) (@DateTime.Today.ToShortDateString()): <strong title="Ukupan broj kreiranih kartica za prvi put">@ViewBag.TicketsCreatedTodayFirstTime</strong> <strong style="color:green" title="Broj kreiranih kartica za prvi put koje su dodijeljene">(@ViewBag.TicketsCreatedTodayFirstTimeAssigned)</strong>
                </div>
            </div>
        </div>
        <br />
        <div class="col-md-12">
            <div class="form-group" style="margin-bottom:0">
                <input id="Search" type="submit" class="btn btn-primary btn-sm" value="Traži"/>
                <input id="btn-reset" type="reset" class="btn btn-warning btn-sm" value="Poništi"/>
            </div>
        </div>
    }
    <hr />
    @Html.Grid(Model).Named("PopisRačunaZaDostavu").SetLanguage("hr").EmptyText("Nema rezultata").Columns(columns =>
{
columns.Add().Encoded(false).Sanitized(false).RenderValueAs(o => Html.CheckBox("checked", false, new { o.MerElectronicId, @class = "checked", @id = "checkbox", @idVal = o.Id }));
columns.Add(m => m.Sender.SubjectName).Encoded(false).Sanitized(false).Titled("Pošijatelj").Sortable(true).RenderValueAs(m =>
@Html.RouteLink(m.Sender.SubjectName + " (" + m.Sender.VAT + ") - " + m.Sender.SubjectBusinessUnit, new { action = "Details", controller = "Organizations", area = "", id = m.SenderId}));
columns.Add(m => m.Receiver.SubjectName).Encoded(false).Sanitized(false).Titled("Primatelj").Sortable(true).RenderValueAs(m =>
@Html.RouteLink(m.Receiver.SubjectName + " (" + m.Receiver.VAT + ") - " + m.Receiver.SubjectBusinessUnit, new { action = "Details", controller = "Organizations", area = "", id = m.ReceiverId }));
columns.Add(m => m.InvoiceNumber).Encoded(false).Sanitized(false).Titled("Interni broj").Sortable(false);
columns.Add(m => m.SentDate).Encoded(false).Sanitized(false).Titled("Datum slanja").Sortable(true).RenderValueAs(m =>
{
    if (m.FirstInvoice == true)
        return @<div><span>@Html.Raw(m.SentDate.ToShortDateString())</span><br /><span class="label label-primary">Prvi dokument</span></div>;

    return @<div><span>@Html.Raw(m.SentDate.ToShortDateString())</span></div>;
});
columns.Add(m => m.BuyerEmail).Encoded(false).Sanitized(false).Titled("E-mail adresa").Sortable(false).SetWidth("15%").RenderValueAs(m =>
{
    if (m.DocumentStatus == 30 && m.IsAssigned == false)
        return @<div><span style="word-break:break-word;">@Html.Raw(m.BuyerEmail)</span></div>;

    if (m.DocumentStatus != 30 && m.IsAssigned == false)
        return @<div><span style="word-break:break-word;">@Html.Raw(m.BuyerEmail)</span></div>;

    return @<div><span style="word-break:break-word;">Dodijeljeno agentu: <strong>@Html.Raw(m.AssignedTo)</strong></span></div>;
});
columns.Add(m => m.MerDocumentTypeIdString).Encoded(false).Sanitized(false).Titled("Tip dokumenta").Sortable(true).RenderValueAs(m =>
{
    if (m.DocumentStatus == 30 && m.IsAssigned == false)
        return @<div><span>@Html.Raw(m.MerDocumentTypeIdString)</span><br /><span class="label label-warning">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 40 && m.IsAssigned == false)
        return @<div><span>@Html.Raw(m.MerDocumentTypeIdString)</span><br /><span class="label label-success">@Html.Raw(m.DocumentStatusString)</span></div>;

        if (m.DocumentStatus == 45 && m.IsAssigned == false)
            return @<div><span>@Html.Raw(m.MerDocumentTypeIdString)</span><br /><span class="label label-info">@Html.Raw(m.DocumentStatusString)</span></div>;

        if (m.DocumentStatus == 50 && m.IsAssigned == false)
            return @<div><span>@Html.Raw(m.MerDocumentTypeIdString)</span><br /><span class="label label-danger">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 55 && m.IsAssigned == false)
        return @<div><span>@Html.Raw(m.MerDocumentTypeIdString)</span><br /><span class="label label-default">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 40 && m.IsAssigned == true)
        return @<div><span class="label label-success">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 45 && m.IsAssigned == true)
        return @<div><span class="label label-info">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 50 && m.IsAssigned == true)
        return @<div><span class="label label-danger">@Html.Raw(m.DocumentStatusString)</span></div>;

    if (m.DocumentStatus == 55 && m.IsAssigned == true)
        return @<div><span class="label label-default">@Html.Raw(m.DocumentStatusString)</span></div>;

    return @<div></div>;
    });
    columns.Add(m => m.InsertDate).Encoded(false).Sanitized(false).Titled("Datum kartice").Sortable(true).RenderValueAs(m =>
    {
        if (m.DocumentStatus == 30 && m.IsAssigned == false)
            return
                @<div><span>@Html.Raw(m.InsertDate.ToShortDateString())</span><br /><a method="post" title="Dodijeli karticu" class="fa fa-check-circle-o fa-2x text-success assinged" data-ticket-id="@Html.Raw(m.Id)" onclick="javascript: Assign()"></a></div>;
        if (m.DocumentStatus == 30 && m.IsAssigned == false && m.Receiver.MerDeliveryDetail.RequiredPostalService)
            return
            @<div><span>@Html.Raw(m.InsertDate.ToShortDateString())</span><br /><a method="post" title="Dodijeli karticu" class="fa fa-check-circle-o fa-2x text-success assinged" data-ticket-id="@Html.Raw(m.Id)" onclick="javascript: Assign()"></a> <i class="fa fa-envelope fa-2x" style="color: gold"></i></div>;

        if (m.DocumentStatus == 30 && m.IsAssigned == true)
            return @<span>
        <i class="fa fa-times-circle-o fa-2x text-danger" title="Kartica je već dodijeljena"></i>
    </span>;

        if (m.DocumentStatus != 30 && m.IsAssigned == false)
            return @<div><span>@Html.Raw(m.InsertDate.ToShortDateString())</span></div>;

        return @<span></span>;
    });
    columns.Add().Encoded(false).Sanitized(false).RenderValueAs(m =>
    {
        if (m.DocumentStatus == 30 && m.IsAssigned == false)
            return @<span>
        <a href="@Url.RouteUrl(new { action = "Details", controller = "Delivery", area = "HelpDesk", m.Id, m.ReceiverId, returnUrl = Request.Url })" title="Detalji kartice"><i class="fa fa-edit"></i></a>
        <a href="@Url.RouteUrl(new { action = "UpdateStatusIndex", controller = "Delivery", area = "HelpDesk", m.Id, returnUrl = Request.Url })" title="Provjeri status dokumenta"><i style="color: forestgreen" class="fa fa-refresh"></i></a>
        <a data-mer-id="@Html.Raw(m.MerElectronicId)" data-ticket-id="@Html.Raw(m.Id)" href="#" class="remove-from-list-ajax" title="Ukloni s popisa za dostavu"><i style="color: red" class="fa fa-remove"></i></a>
    </span>;

        if (m.DocumentStatus == 30 && (m.IsAssigned == true && (User.IsInRole("Management") || User.IsInRole("Administrator") || User.IsInRole("Superadmin")) || m.AssignedTo == User.Identity.Name))
            return @<span>
        <a href="@Url.RouteUrl(new { action = "Details", controller = "Delivery", area = "HelpDesk", m.Id, m.ReceiverId, returnUrl = Request.Url })" title="Detalji kartice"><i class="fa fa-edit"></i></a>
    </span>;

        if (m.DocumentStatus != 30)
            return @<span>
        <a href="@Url.RouteUrl(new { action = "Details", controller = "Delivery", area = "HelpDesk", m.Id, m.ReceiverId, returnUrl = Request.Url })" title="Detalji kartice"><i class="fa fa-edit"></i></a>
    </span>;

        return @<span>
    </span>;
});
}).WithPaging(20)
</body>

<script>
        $(document).on("click", "a.remove-from-list-ajax", function (e) {
            e.preventDefault();
            if (window.confirm("Jeste li sigurni da želite ukloniti ovaj dokument iz popisa za dostavu?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "Remove", controller = "Delivery", area = "HelpDesk" })',
                    data: {
                        MerElectronicId: $(this).data("mer-id"),
                        TicketId: $(this).data("ticket-id")
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Uspješno ste uklonili dokument iz popisa za dostavu!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
            window.location.reload(true)
    });
    $(document).on("click", "a.delivery-mail", function (e) {
        e.preventDefault();
        $.ajax({
            method: 'POST',
            url: '@Url.RouteUrl(new { action = "LogEmail", controller = "Delivery", area = "HelpDesk" })',
            data: {
                _Agent: $(this).data("agent"),
                _Email: $(this).data("email"),
                _TicketId: $(this).data("ticket-id"),
            },
            dataType: 'json'
        });
        var email = $(this).data("email");
        var subject = "Upit";
        window.location = 'mailto:' + email + '?subject=' + subject;
        });
    $("#send-report").click(function (e) {
        e.preventDefault();
        var email = "matej@moj-eracun.hr; alen.jedud@moj-eracun.hr";
        var subject = "Moj-CRM -- Dnevni izvještaj -- Odjel dostave";
        var body = "Poštovani," + "%0D%0A" + "%0D%0A" + "danas je kreirano @ViewBag.TicketsCreatedToday kartica, od toga @ViewBag.OpenTicketsAssigned za prvi puta." + "%0D%0A" + "%0D%0A" + "Uključujući stare kartice, ukupno se mora obraditi @ViewBag.TotalOpenedTickets kartica. Zbog toga će raspored na dostavi biti:" + "%0D%0A" + "%0D%0A"
            + "Darko Glatki: " + "%0D%0A" + "Tomislav Ptiček: " + "%0D%0A" + "Filip Troskot: " + "%0D%0A" + "Filip Karmazen: " + "%0D%0A" + "Katarina Ceković: " + "%0D%0A" + "Nikolina Ćosić: " + "%0D%0A" + "Matija Ekart: " + "%0D%0A" + "Ana Šimac: " + "%0D%0A" + "Filip Klarić: " + "%0D%0A" + "%0D%0A" + "Lijep pozdrav,";
        window.location = 'mailto:' + email + '?subject=' + subject + '&body=' + body;
    });
    function Resend() {
            $(document).on("click", "a.resend-document-ajax", function (e) {
        e.preventDefault();
        if (window.confirm("Ponovo pošalji obavijest o ovom dokumentu?"))
            $.ajax({
                method: 'POST',
                url: '@Url.RouteUrl(new { action = "Resend", controller = "Delivery", area = "HelpDesk" })',
                data: {
                    Id: $(this).data("mer-id"),
                    Agent: $(this).data("@User.Identity.Name")
                },
                success: function (data) {
//                    console.log(data.Status);
                    if (data.Status === 'OK')
                        alert("Poruka je ponovno poslana!");
                    else
                        alert("Greška!");
                },
                dataType: 'json'
            });
        window.location.reload(true)
    });
    }
</script>
<script>
    function RemoveAll() {
        $(document).on("click", "#remove-all", function (e) {
            e.preventDefault();
            var selectedItems = $('input.checked:checked').map(function () { return $(this).attr('idVal'); }).get();
            if (window.confirm("Jeste li sigurni da želite ukloniti označene dokumente iz popisa za dostavu?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "RemoveAll", controller = "Delivery", area = "HelpDesk" })',
                    data: {
                        TicketIds: selectedItems
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Uspješno ste uklonili dokumente iz popisa za dostavu!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
            window.location.reload(true)
        });
    }
        function Assign() {
            $(document).on("click", ".assinged", function (e) {
            e.preventDefault();
            if (window.confirm("Jeste li sigurni da želite dodijeliti ovu karticu sebi?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "Assign", controller = "Delivery", area = "HelpDesk" })',
                    data: {
                        Id: $(this).data("ticket-id")
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Kartica Vam je dodijeljenja!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
            window.location.reload(true)
        });
    }
    function AssignAll() {
        $(document).on("click", "#assign-all", function (e) {
            e.preventDefault();
            var selectedItems = $('input.checked:checked').map(function () { return $(this).attr('idVal'); }).get();
            if (window.confirm("Jeste li sigurni da želite dodijeliti označene dokumente iz popisa za dostavu?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "AssignAll", controller = "Delivery", area = "HelpDesk" })',
                    data: {
                        TicketIds: selectedItems
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Uspješno ste dodijelili dokumente iz popisa za dostavu!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
            window.location.reload(true)
        });
    }
</script>
<script>
    $(function () {
        $(".date-picker").datepicker({
            language: 'hr',
            weekStart: 1,
            format: "dd.mm.yyyy.",
            autoclose: true,
            orientation: "auto bottom",
        });
        $("#btn-reset").click(function (e) {
            $(document).find('input[type=text]').attr('value', '');
            $(document).find("select option").attr('selected', false);
        });
    })
</script>
